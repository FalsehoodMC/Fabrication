import com.google.common.collect.ImmutableList
import com.google.gson.JsonArray
import com.google.gson.JsonElement
import com.google.gson.JsonNull
import com.google.gson.JsonObject
import com.google.gson.JsonPrimitive

import java.nio.file.Files
import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'io.github.juuxel.loom-quiltflower' version '1.6.0'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
	maven {
		url 'https://repo.sleeping.town'
		content {
			includeGroup 'com.unascribed'
		}
	}
	maven {
		url 'https://maven.terraformersmc.com/releases'
		content {
			includeGroup 'com.terraformersmc'
		}
	}
	maven {
		url 'https://maven.ssf.tf/'
		content {
			includeGroup 'tf.ssf.sfort'
		}
	}
	maven {
		url 'https://maven.gegy.dev/releases'
		content {
			includeGroup 'io.github.queerbric'
		}
	}
	maven {
		url 'https://repo.fabricmc.net'
		content {
			includeGroup 'net.fabricmc'
			includeGroup 'net.fabricmc.api'
		}
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation fabricApi.module('fabric-api-base', project.fabric_version)
	modImplementation fabricApi.module('fabric-resource-loader-v0', project.fabric_version)
	modImplementation fabricApi.module('fabric-command-api-v1', project.fabric_version)
	modImplementation fabricApi.module('fabric-item-api-v1', project.fabric_version)
	modImplementation fabricApi.module('fabric-key-binding-api-v1', project.fabric_version)
	modImplementation fabricApi.module('fabric-rendering-v1', project.fabric_version)
	// TODO I would really like to not dep on these two
	modImplementation fabricApi.module('fabric-registry-sync-v0', project.fabric_version)
	modImplementation fabricApi.module('fabric-networking-api-v1', project.fabric_version)
	
	modImplementation(include('io.github.queerbric:pridelib:1.1.0+1.17')) {
		transitive = false
	}
	modImplementation('com.terraformersmc:modmenu:3.1.0') {
		transitive = false
	}
	modImplementation 'com.unascribed:ears-api:1.4.5'
	modImplementation('tf.ssf.sfort:fscript:3.1.2-1.18.1') {
		transitive = false
	}
	modRuntimeOnly fabricApi.module('fabric-screen-api-v1', project.fabric_version)

	annotationProcessor project(':ap')
	implementation 'com.google.code.gson:gson:2.8.9'
}

loom.accessWidenerPath = file('src/main/resources/fabrication.accesswidener')

task fabGenFeatures {
	JsonObject json = new FeaturesFileParser(project.version, logger, Arrays.asList(file('features.yml').text.split('\\r?\\n')), 'features.yml').toJson()
	file('src/main/resources/features.json').text = json.toString()
	file('src/main/resources/default_features_config.ini').text = FeatureConfigTransformer.transform(Arrays.asList(file('src/main/resources/default_features_config.ini.tmpl').text.split('\\r?\\n')), json)
}
class FeatureConfigTransformer{
	static String transform(List<String> lines, JsonObject data){
		StringBuilder out = new StringBuilder()
		int lineNum = 0
		for (String line : lines) {
			lineNum++
			String trim = line.trim()
			if (trim == ';!!;') {
				for(Map.Entry<String, JsonElement> entry : data.entrySet()){
					String k = entry.getKey()
					JsonObject datum = entry.getValue().asJsonObject
					int leadingTabs = 0
					if (k.indexOf('.') != -1) {
						leadingTabs = 1
						if (!datum.parent.isJsonNull()) {
							leadingTabs++
							if (datum.meta.getAsBoolean()) {
								continue
							}
						}
					} else if (datum.meta.getAsBoolean()) {
						continue
					}
					String val = "unset"
					String desc = datum.desc.getAsString()
					String sides_friendly = null
					switch (datum.sides.getAsString()) {
						case "irrelevant": break
						case "either": sides_friendly = "Server or Client"; break
						case "client_only": sides_friendly = "Client Only"; break
						case "server_only": sides_friendly = "Server Only"; break
						case "server_only_with_client_helper": sides_friendly = "Server & Client (Client Optional)"; break
						case "server_and_client": sides_friendly = "Server & Client"; break
					}
					if (sides_friendly != null) {
						desc = sides_friendly+"\n\n"+desc
					}
					if (k.startsWith('general.category.')) {
						if (k == "general.category.fixes") {
							val = "true"
						} else if (k == "general.category.utility") {
							val = "true"
						} else if (k == "general.category.tweaks") {
							val = "true"
						} else {
							val = "false"
						}
					} else if (k == "general.runtime_checks") {
						val = "true"
					} else if (k == "general.reduced_motion") {
						val = "false"
					} else if (k == "general.data_upload") {
						val = "false"
					}
					desc = foldLine(desc, 78-(leadingTabs*8))
					if (datum != null){
						if (!datum.media.isJsonNull() || !datum.extra_media.isJsonNull() || !datum.link_url.isJsonNull()) desc += '\n'
						if (!datum.media.isJsonNull()) {
							desc += '\n'+datum.media_text.getAsString()+': '+datum.media.getAsString()
						}
						if (!datum.extra_media.isJsonNull()) {
							desc += '\n'+datum.extra_media_text.getAsString()+': '+datum.extra_media.getAsString()
						}
						if (!datum.link_url.isJsonNull()) {
							desc += '\n'+datum.link_text.getAsString()+': '+datum.link_url.getAsString()
						}
					}
					String tabs = ""
					for (int i=0; i<leadingTabs; i++) {
						tabs += '\t'
					}
					desc = tabs+'; '+desc
					out.append(desc.replaceAll('\\r?\\n', '\r\n'+tabs+'; ')).append('\r\n')
					if (k.indexOf('.') !== -1) {
						out.append(tabs).append(k.substring(k.indexOf('.')+1)).append("=").append(val).append("\r\n\r\n")
					} else {
						out.append(tabs).append("[").append(k).append("]\r\n")
					}
				}
			} else {
				out.append(line)
				out.append('\r\n')
			}
		}
		return out.toString()
	}
	static String foldLine(String input, int length){
		String[] lines = input.split(" ")
		if (input.length() < length || lines.length == 0) return input + '\r\n'
		StringBuilder out = new StringBuilder()
		StringBuilder line = new StringBuilder(lines[0]).append(' ')
		int i = 1;
		while(true) {
			if (line.length() + lines[i].length() < length) {
				line.append(lines[i]).append(' ')
				if (++i>=lines.length) {
					out.append(line.append('\r\n'))
					break
				}
			} else {
				out.append(line.append('\r\n'))
				line = new StringBuilder(lines[i]).append(' ')
				if (++i>=lines.length) {
					out.append(line)
					break
				}
			}
		}
		return out.toString()
	}
}
class FeaturesFileParser{
	String curKey = null
	JsonObject cur = new JsonObject()
	int lineNum = 0
	String multilineKey = null
	String multilineBuf = ""
	List<JsonObject> data = new LinkedList<>()
	String projectVersion

	FeaturesFileParser(String projectVersion, Logger logger, List<String> text, String file) {
		this.projectVersion = projectVersion
		for (String line : text){
			lineNum++
			if (line.indexOf('@') == 0) {
				String[] split = line.split(" ")
				switch (split[0]) {
					case "@include":
						File f = new File(split[1])
						if (f.isFile()) {
							data.addAll(new FeaturesFileParser(projectVersion, logger, Files.readAllLines(f.toPath()), split[1]).data)
						} else if (f.isDirectory()) {
							for (File fi : f.listFiles()) {
								data.addAll(new FeaturesFileParser(projectVersion, logger, Files.readAllLines(fi.toPath()), fi.toString()).data)
							}
						}
						break
					default:
						logger.log(LogLevel.ERROR, "At line "+lineNum+" in "+file+": Unknown at-directive "+split[0]+". Ignoring")
				}
				continue
			}
			String trim = line.trim()
			if (trim.startsWith('#')) continue
			int leadingTabs = 0
			for (int i = 0; i < line.length(); i++) {
				if (line.charAt(i) == '\t' as char) {
					leadingTabs++
				} else {
					break
				}
			}
			if (leadingTabs == 0) {
				if (trim.length() > 0) {
					if (curKey != null) {
						commit()
					}
					if (trim.lastIndexOf(":") == trim.length()-1) {
						// yaml syntax compatibility
						trim = trim.substring(0, trim.length()-1)
					}
					curKey = trim
				} else {
					if (multilineKey !== null) {
						multilineBuf += "\n"
					}
				}
			} else if (curKey == null) {
				logger.log(LogLevel.ERROR, "At line "+lineNum+" in "+file+": Got an indented line before a key definition. Ignoring")
				continue
			} else {
				if (leadingTabs == 1) {
					if (multilineKey !== null) {
						commitMultiline()
					}
					int colonIdx = trim.indexOf(':')
					if (colonIdx == -1) {
						logger.log(LogLevel.ERROR, "At line "+lineNum+" in "+file+": Got a single-indented line with no colon. Ignoring")
						continue
					}
					String k = trim.substring(0, colonIdx).trim()
					if (!defaults(curKey, new JsonObject()).has(k)) {
						logger.log(LogLevel.ERROR, "At line "+lineNum+" in "+file+": Got an unknown key "+k+". Ignoring")
						continue
					}
					String  v = trim.substring(colonIdx+1).trim()
					if (v == '') {
						multilineKey = k
					} else {
						switch (k) {
							case 'needs':
								String[] sArr = v.split(' ')
								JsonArray arr = new JsonArray(sArr.length)
								for (String str : sArr) arr.add(str)
								cur.add(k, arr)
								break
							case 'endorsed': case 'hidden': case 'section': case 'meta':
								cur.addProperty(k, v == 'true')
								break
							default:
								cur.addProperty(k, v)
								break
						}
					}
				} else if (leadingTabs >= 2) {
					if (multilineKey != null) {
						if (trim.length() == 0) {
							// paragraph separator
							multilineBuf += "\n\n"
						} else {
							multilineBuf += line.substring(2)+" "
							if (line.matches("  \$")) multilineBuf += "\n"
						}
					}
				}
			}
		}
		if (curKey != null) commit()
	}

	void commitMultiline() {
		if (multilineKey != null) {
			cur.add(multilineKey, new JsonPrimitive(multilineBuf.trim().replaceAll(' +\\n','\n')))
		}
		multilineKey = null
		multilineBuf = ""
	}

	JsonObject defaults(String curKey, JsonObject cur){
		JsonObject ret = new JsonObject()
		ret.addProperty("name", curKey)
		ret.add("short_name", cur.name)
		ret.addProperty("meta", false)
		ret.addProperty("section", false)
		ret.addProperty("hidden", false)
		ret.addProperty("extra", false)
		ret.add("since", JsonNull.INSTANCE)
		ret.addProperty("since_code", 0)
		ret.addProperty("sides", "irrelevant")
		ret.add("needs", new JsonArray())
		ret.add("parent", JsonNull.INSTANCE)
		ret.add("media", JsonNull.INSTANCE)
		ret.addProperty("media_text", (String)(cur.has("media") ? (cur.media.getAsString().trim().endsWith(".mp4") ? 'Demonstration video' : 'Demonstration image') : null))
		ret.add("extra_media", JsonNull.INSTANCE)
		ret.addProperty("extra_media_text", (String)(cur.has("extra_media") ? (cur.extra_media.getAsString().trim().endsWith(".mp4") ? 'Demonstration video' : 'Demonstration image') : null))
		ret.add("link_url", JsonNull.INSTANCE)
		ret.addProperty("link_text", (String)(cur.has("link_url") ? 'See also' : null))
		String short_desc = null
		if (cur.has("desc")){
			Matcher matcher = Pattern.compile("\\.( |\\n|\$)").matcher(cur.desc.getAsString())
			if (matcher.find()) {
				short_desc = cur.desc.getAsString().substring(0, matcher.start())
			} else {
				short_desc =  cur.desc.getAsString()
			}
		}
		ret.addProperty("short_desc", (String)short_desc)
		ret.add("desc", JsonNull.INSTANCE)
		ret.addProperty("brand_new", cur.has("since") && projectVersion == cur.since.getAsString())
		ret.add("fscript", JsonNull.INSTANCE)
		ret.add("fscript_default", JsonNull.INSTANCE)
		ret.add("extra_fscript", JsonNull.INSTANCE)
		ret.add("extend", JsonNull.INSTANCE)
		ret.addProperty("new", false)

		for(Map.Entry<String, JsonElement> entry : cur.entrySet()) {
			ret.add(entry.getKey(), entry.getValue())
		}

		return ret
	}
	void commit() {
		commitMultiline()
		cur = defaults(curKey, cur)
		cur.addProperty("key", curKey)
		if (curKey.indexOf(".extra.") > -1) {
			cur.addProperty("extra", true)
		}
		if (cur.has("section") && cur.section.getAsBoolean()) {
			createCategory()
		}
		data.add(cur)
		curKey = null
		cur = new JsonObject()
	}

	void createCategory() {
		if (cur.has("key") && "general" == cur.key.getAsString()) return
		JsonObject curDupe = cur.deepCopy()
		curDupe.addProperty("key", 'general.category.' + cur.key.getAsString())
		curDupe.addProperty("desc", 'Enable all features in ' + cur.name.getAsString() + "\n" + (cur.has("desc") && !cur.desc.isJsonNull() ? cur.desc.getAsString() : ""))
		curDupe.addProperty("section", false)
		data.add(curDupe)
	}

	JsonObject toJson(){
		ImmutableList<String> sections = ImmutableList.copyOf(["general", "fixes", "utility", "tweaks", "minor_mechanics", "mechanics", "balance", "weird_tweaks", "woina", "unsafe", "pedantry", "experiments"])
		data.sort((a, b) -> {
			String sectionA = a.key.getAsString().indexOf('.') == -1 ? a.key.getAsString() : a.key.getAsString().substring(0, a.key.getAsString().indexOf('.'))
			String sectionB = b.key.getAsString().indexOf('.') == -1 ? b.key.getAsString() : b.key.getAsString().substring(0, b.key.getAsString().indexOf('.'))
			if (sectionA == sectionB && sectionA == a.key.getAsString()) return -1
			if (sectionA == sectionB && sectionB == b.key.getAsString()) return 1
			if (sectionA != sectionB) return sections.indexOf(sectionA) - sections.indexOf(sectionB)
			if (a.meta.getAsBoolean() != b.meta.getAsBoolean()) return a.meta.getAsBoolean() ? -1 : 1;
			return a.key.getAsString().compareTo(b.key.getAsString())
		})
		Set<String> _allVersions = new HashSet<>()
		for (JsonObject d : data) {
			if (d.since.isJsonNull()) continue
			_allVersions.add(d.since.getAsString())
		}
		List<String> allVersions = new LinkedList<>(_allVersions)
		allVersions.sort((v1, v2) -> {
			List<Integer> longer = dismantleVersion(v1)
			List<Integer> shorter = dismantleVersion(v2)
			boolean firstLonger = longer.size() > shorter.size()
			if (!firstLonger) {
				List<Integer> l2 = shorter
				shorter = longer
				longer = l2
			}
			int i = 0
			for (; i<shorter.size(); i++){
				int comp = Integer.compare(longer.get(i), shorter.get(i))
				if (comp != 0) return firstLonger ? comp : -comp
			}
			for (; i<longer.size(); i++){
				if (longer.get(i)>0) return firstLonger ? 1 : -1
			}
			return 0
		})

		for (JsonObject d : data) {
			if (d.since.isJsonNull()) continue
			int i = allVersions.indexOf(d.since.getAsString())
			d.addProperty("since_code", i)
			d.addProperty("new", i+1>=allVersions.size())
		}

		JsonObject dataObj = new JsonObject()
		for (JsonObject d : data) {
			String key = d.key.getAsString()
			d.remove("key")
			if (d != null) {
				dataObj.add(key, d)
			}
		}

		return dataObj
	}
	static List<Integer> dismantleVersion(String version){
		List<Integer> out = new LinkedList<>()
		out.add(0)
		for (char chr : version.chars()) {
			if (chr >= '0' as char && chr <= '9' as char) {
				out.set(out.size()-1, out.get(out.size()-1)*10 + (chr-('0' as char)))
			} else if (out.get(out.size()-1) > 0) {
				out.add(0)
			}
		}
		return out
	}
}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
	dependsOn(fabGenFeatures)
}

sourceSets {
	dummy {
		compileClasspath += configurations.compileClasspath
	}
	main {
		compileClasspath += dummy.output
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

jar {
	doFirst {
		StringBuilder bldr = new StringBuilder();
		File dir = file('build/classes/java/main');
		dir.eachFileRecurse(groovy.io.FileType.FILES, {
			if (it.name.endsWith('.class')) {
				bldr.append(it.getAbsolutePath().substring(dir.getAbsolutePath().length()+1))
				bldr.append('\n')
			}
		})
		file('build/tmp/classes.txt').text = bldr.toString();

		def lge = project.getExtensions().getByType(net.fabricmc.loom.api.LoomGradleExtensionAPI.class)
		def mappings = lge.getMappingsProvider().getMappings()
		Map<String, Mapp> toInter = new HashMap<>()
		Map<String, Map<String, String>> fabReflFields = new HashMap<>()
		List<Map.Entry<String, String>> fabReflBldr = new ArrayList<>()
		List<String> fabRefl = Files.readAllLines(file('build/tmp/fabReflToMap').toPath())
		if (fabRefl.size() > 0) {
			for (String fog : fabRefl.get(0).split('\t')){
				String f = (fog.charAt(0) == 'L' as char? fog.substring(1) : fog).replace('.', '/')
				int col = f.indexOf(';')
				String fKey = f.substring(0, col);
				if (!fabReflFields.containsKey(fKey)) fabReflFields.put(fKey, new HashMap<String, String>())
				fabReflFields.get(fKey).put(f.substring(col+1), fog)
			}
			if (fabRefl.size() > 1) {
				for (String f : fabRefl.get(1).split('\t')){
					if (toInter.containsKey('FabRefl')) toInter.get('FabRefl').add(new Mapp.Target[]{new Mapp.Target(f)})
					else toInter.put('FabRefl', new Mapp(new String[]{}, new String[]{}, new Mapp.Target[]{new Mapp.Target(f)}))
				}
			}
		}
		List<String> toParse = Files.readAllLines(file('build/tmp/fabToRefMap').toPath())
		for (int i=0; i+3<toParse.size(); i++){
			String toInterKey = toParse.get(i)
			if (toInter.containsKey(toInterKey)) toInter.get(toInterKey).add(toParse.get(++i).split('\t'), toParse.get(++i).split('\t'), toParse.get(++i).split('\t'))
			else toInter.put(toInterKey, new Mapp(toParse.get(++i).split('\t'), toParse.get(++i).split('\t'), toParse.get(++i).split('\t')))
		}
		Map<String, String> targetMap = new HashMap<>()
		Map<String, String> methodMap = new HashMap<>()
		Map<String, String> classMap = new HashMap<>()
		for (def cl : mappings.classes){
			String clName = cl.getName('named')
			String clNameRez = cl.getName('intermediary')
			if (fabReflFields.containsKey(clName)){
				Map<String, String> inmap = fabReflFields.get(clName)
				for (Map.Entry<String, String> entry : inmap) {
					String toFind = entry.getKey()
					for (def fld : cl.fields) {
						if (toFind.equals(fld.getName('named'))) {
							fabReflBldr.add(new AbstractMap.SimpleEntry<String, String>(entry.getValue(), fld.getName('intermediary')))
							break
						}
					}
				}
			}
			for (def map : toInter.values()){
				if (map.mixin.contains(clName.replace('/', '.'))) {
					for (def clMethod : cl.methods) {
						for (String mthd : map.method) {
							int col = mthd.indexOf(';')
							int dot = mthd.indexOf('.')
							if (col == -1 || dot < col && dot != -1) col = dot
							int brc = mthd.indexOf('(')
							String desc = mthd.substring(brc)
							String name = mthd.substring(col == -1 || brc<col ? 0 : col+1, brc)
							if ((name.equals(clMethod.getName('named')) || name.equals(clMethod.getName('intermediary'))) && (desc.equals(clMethod.getDesc('named')) || desc.equals(clMethod.getDesc('intermediary')))) {
								methodMap.put(clName+';'+name+desc, clMethod.getName('intermediary') + clMethod.getDesc('intermediary'))
							}
						}
					}
				}
				for (Mapp.Target mapt : map.target) {
					String target = mapt.self
					int col = target.indexOf(';')
					int dot = target.indexOf('.')
					if (col == -1 || dot < col && dot != -1) col = dot
					if (mapt.applicable.contains(clName.replace('/', '.'))){
						classMap.put(clName, clNameRez)
						int brc = target.indexOf('(')
						String desc = target.substring(brc)
						String name = target.substring(col+1, brc)
						for (def clMethod : cl.methods) {
							if ((clMethod.getName('named').equals(name) || clMethod.getName('intermediary').equals(name)) && (clMethod.getDesc('named').equals(desc) || clMethod.getDesc('intermediary').equals(desc))){
								targetMap.put(target, clMethod.getName('intermediary')+clMethod.getDesc('intermediary'))
							}
						}
					}
				}
			}
		}
		for (Map<String, String> inmap : fabReflFields.values()) {
			for (String s : inmap.values()) {
				boolean missing = true
				for (Map.Entry<String, String> entry : fabReflBldr) {
					if (entry.getKey().equals(s)){
						missing = false
						break
					}
				}
				if (missing) {
					logger.log(LogLevel.ERROR, "Failed to map "+s+" for FabReflField")
				}
			}
		}
		StringBuilder strbldr = new StringBuilder()
		for (def intr : toInter){
			strbldr.append(intr.key)
			strbldr.append('\n')
			boolean frst = true
			for (String s : intr.value.method) {
				boolean missedMthd = true
				for (String c : intr.value.mixin) {
					String set = methodMap.get(c.replace('.', '/')+';'+s)
					if (set != null){
						if (frst) frst = false;
						else strbldr.append('\t')
						strbldr.append(s).append(' ').append(set)
						missedMthd = false
						break
					}
				}
				if (missedMthd) {
					logger.log(LogLevel.ERROR, "Failed to map "+s+" for "+intr.key)
				}
			}
			if ('FabRefl'.equals(intr.getKey())){
				StringBuilder fabReflStrbldr = new StringBuilder();
				for (Map.Entry<String, String> entry : fabReflBldr) {
					if (!fabReflStrbldr.isEmpty()) fabReflStrbldr.append('\t')
					fabReflStrbldr.append(entry.getKey()).append(' ').append(entry.getValue())
				}
				strbldr.append(fabReflStrbldr)
			}
			strbldr.append('\n')
			frst = true
			for (Mapp.Target tar : intr.value.target){
				String s = tar.self
				String ad = targetMap.get(s);
				if (ad != null) {
					int col = s.indexOf(';')
					int dot = s.indexOf('.')
					if (col == -1 || dot < col && dot != -1) col = dot
					if (frst) frst = false;
					else strbldr.append('\t')
					strbldr.append(s).append(' ').append('L').append(classMap.get(s.substring(s.charAt(0) == 'L' as char ? 1 : 0, col))).append(';').append(ad)
				} else {
					logger.log(LogLevel.ERROR, "Failed to map "+s+" for "+intr.key)
				}
			}
			strbldr.append('\n')
		}
		file('build/tmp/fabRefMap.txt').text = strbldr.toString()
	}

	from 'LICENSE'
	from 'build/tmp/classes.txt'
	from 'build/tmp/fabRefMap.txt'
}

class Mapp{
	static class Target{
		Target(String target){
			int i = target.indexOf(' ');
			if (i == -1){
				this.self = target
				this.applicable = new ArrayList<>()
			} else {
				this.self = target.substring(0, i)
				this.applicable = target.substring(i).split(' ')
			}
		}
		public String self
		public List<String> applicable
	}
	void add(String[] mixin, String[] method, String[] target){
		for (String s : mixin) this.mixin.add(s)
		for (String s : method) this.method.add(s)
		for (String s : target) this.target.add(new Target(s))
	}
	void add(Target[] target){
		for (Target s : target) this.target.add(s)
	}
	Mapp(String[] mixin, String[] method, String[] target){
		this.mixin = mixin
		this.method = method
		this.target = new ArrayList<>()
		for (String s : target) this.target.add(new Target(s))
	}
	Mapp(String[] mixin, String[] method, Target[] target){
		this.mixin = mixin;
		this.method = method;
		this.target = target;
	}
	public List<String> mixin
	public List<String> method
	public List<Target> target
}
