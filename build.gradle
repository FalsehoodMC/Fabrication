import java.nio.file.Files

plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
	maven {
		url = "https://repo.unascribed.com"
	}
	maven {
		name = "JitPack"
		url = "https://jitpack.io"
	}
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases"
	}
	maven {
		url = 'https://maven.ssf.tf/'
		content {
			includeGroup "tf.ssf.sfort"
		}
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation include(fabricApi.module("fabric-resource-loader-v0", "${project.fabric_version}"))
	modImplementation include(fabricApi.module("fabric-command-api-v1", "${project.fabric_version}"))
	modImplementation include(fabricApi.module("fabric-item-api-v1", "${project.fabric_version}"))
	modImplementation include(fabricApi.module("fabric-key-binding-api-v1", "${project.fabric_version}"))
	modImplementation include(fabricApi.module("fabric-rendering-v1", "${project.fabric_version}"))
	
	modImplementation(include("com.github.Queerbric:pridelib:d8ead31410")) {
		transitive = false
	}
	modImplementation("com.terraformersmc:modmenu:2.0.3") {
		transitive = false
	}
	modImplementation "com.unascribed:ears-api:1.4.1"
	modImplementation("tf.ssf.sfort:fscript:1.1.5") {
		transitive = false
	}
	modRuntime fabricApi.module("fabric-screen-api-v1", "${project.fabric_version}")

	annotationProcessor project(":ap"){
	}
}

minecraft {
	accessWidener "src/main/resources/fabrication.accesswidener"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

jar {
	doFirst {
		StringBuilder bldr = new StringBuilder();
		File dir = file('build/classes/java/main');
		dir.eachFileRecurse(groovy.io.FileType.FILES, {
			if (it.name.endsWith(".class")) {
				bldr.append(it.getAbsolutePath().substring(dir.getAbsolutePath().length()+1))
				bldr.append("\n")
			}
		})
		file('build/tmp/classes.txt').text = bldr.toString();

		def lge = project.getExtensions().getByType(net.fabricmc.loom.LoomGradleExtension.class)
		def mappings = lge.getMappingsProvider().getMappings()
		Map<String, Mapp> toInter = new HashMap<>()
		List<String> toParse = Files.readAllLines(file('build/tmp/fabToRefMap').toPath())
		for (int i=0; i+3<toParse.size(); i++){
			String toInterKey = toParse.get(i)
			if (toInter.containsKey(toInterKey)) toInter.get(toInterKey).add(toParse.get(++i).split('\t'), toParse.get(++i).split('\t'), toParse.get(++i).split('\t'))
			else toInter.put(toInterKey, new Mapp(toParse.get(++i).split('\t'), toParse.get(++i).split('\t'), toParse.get(++i).split('\t')))
		}
		Map<String, String> targetMap = new HashMap<>()
		Map<String, String> methodMap = new HashMap<>()
		Map<String, String> classMap = new HashMap<>();
		for (def cl : mappings.classes){
			for (def map : toInter.values()){
				String clName = cl.getName("named")
				String clNameRez = cl.getName("intermediary")
				if (map.mixin.contains(clName.replace('/', '.'))) {
					for (def clMethod : cl.methods) {
						for (String mthd : map.method) {
							int col = mthd.indexOf(';')
							int dot = mthd.indexOf('.')
							if (col == -1 || dot < col && dot != -1) col = dot
							int brc = mthd.indexOf('(')
							String desc = mthd.substring(brc)
							String name = mthd.substring(col == -1 || brc<col ? 0 : col+1, brc)
							if ((name.equals(clMethod.getName("named")) || name.equals(clMethod.getName("intermediary"))) && (desc.equals(clMethod.getDescriptor("named")) || desc.equals(clMethod.getDescriptor("intermediary")))) {
								methodMap.put(clName+";"+name+desc, clMethod.getName("intermediary") + clMethod.getDescriptor("intermediary"))
							}
						}
					}
				}
				for (Mapp.Target mapt : map.target) {
					String target = mapt.self
					int col = target.indexOf(';')
					int dot = target.indexOf('.')
					if (col == -1 || dot < col && dot != -1) col = dot
					if (mapt.applicable.contains(clName.replace('/', '.'))){
						classMap.put(clName, clNameRez)
						int brc = target.indexOf('(')
						String desc = target.substring(brc)
						String name = target.substring(col+1, brc)
						for (def clMethod : cl.methods) {
							if ((clMethod.getName("named").equals(name) || clMethod.getName("intermediary").equals(name)) && (clMethod.getDescriptor("named").equals(desc) || clMethod.getDescriptor("intermediary").equals(desc))){
								targetMap.put(target, clMethod.getName("intermediary")+clMethod.getDescriptor("intermediary"))
							}
						}
					}
				}
			}
		}
		StringBuilder strbldr = new StringBuilder()
		for (def intr : toInter){
			strbldr.append(intr.key)
			strbldr.append('\n')
			boolean frst = true
			for (String s : intr.value.method) {
				for (String c : intr.value.mixin) {
					String set = methodMap.get(c.replace('.', '/')+";"+s)
					if (set != null){
						if (frst) frst = false;
						else strbldr.append('\t')
						strbldr.append(s+" "+set)
						break
					}
				}
			}
			strbldr.append('\n')
			frst = true
			for (Mapp.Target tar : intr.value.target){
				String s = tar.self
				String ad = targetMap.get(s);
				if (ad != null) {
					int col = s.indexOf(';')
					int dot = s.indexOf('.')
					if (col == -1 || dot < col && dot != -1) col = dot
					if (frst) frst = false;
					else strbldr.append('\t')
					strbldr.append(s+" "+"L"+classMap.get(s.substring(s.charAt(0) == 'L' as char ? 1 : 0, col))+";"+ad)
				}
			}
			strbldr.append('\n')
		}
		file('build/tmp/fabRefMap.txt').text = strbldr.toString()
	}

	from "LICENSE"
	from "build/tmp/classes.txt"
	from "build/tmp/fabRefMap.txt"
}

class Mapp{
	class Target{
		Target(String target){
			int i = target.indexOf(' ');
			if (i == -1){
				this.self = target
				this.applicable = new ArrayList<>()
			} else {
				this.self = target.substring(0, i)
				this.applicable = target.substring(i).split(' ')
			}
		}
		public String self
		public List<String> applicable
	}
	void add(String[] mixin, String[] method, String[] target){
		for (String s : mixin) this.mixin.add(s)
		for (String s : method) this.method.add(s)
		for (String s : target) this.target.add(new Target(s))
	}
	Mapp(String[] mixin, String[] method, String[] target){
		this.mixin = mixin
		this.method = method
		this.target = new ArrayList<>()
		for (String s : target) this.target.add(new Target(s))
	}
	public List<String> mixin
	public List<String> method
	public List<Target> target
}
